To implement the solution using React for dynamic form generation, data submission, and editing, you'll need to follow these steps:

1. Fetch the JSON fields from the server.
2. Generate form inputs based on the JSON fields.
3. Save the form data to the server.
4. Fetch existing data by ID to edit.
5. Populate the form with the fetched data for editing.
6. Update the data on the server.

Here's a complete example using React:

### 1. Set Up Your Project

Assume you have a backend server running and endpoints to:
- Fetch JSON fields: `GET /json-fields`
- Save form data: `POST /save-form-data`
- Fetch form data by ID: `GET /form-data/:id`
- Update form data: `PUT /update-form-data/:id`

### 2. Create React Components

#### 1. App Component

The main component to fetch JSON fields and render the form.

```javascript
import React, { useEffect, useState } from 'react';
import FormGenerator from './FormGenerator';
import axios from 'axios';

const App = () => {
    const [jsonFields, setJsonFields] = useState(null);
    const [formData, setFormData] = useState(null);
    const [formId, setFormId] = useState(null);

    useEffect(() => {
        fetchJsonFields();
    }, []);

    const fetchJsonFields = async () => {
        try {
            const response = await axios.get('/json-fields');
            setJsonFields(response.data);
        } catch (error) {
            console.error('Error fetching JSON fields:', error);
        }
    };

    const saveFormData = async (data) => {
        try {
            const response = await axios.post('/save-form-data', data);
            console.log('Form data saved:', response.data);
        } catch (error) {
            console.error('Error saving form data:', error);
        }
    };

    const fetchFormData = async (id) => {
        try {
            const response = await axios.get(`/form-data/${id}`);
            setFormData(response.data);
        } catch (error) {
            console.error('Error fetching form data:', error);
        }
    };

    const updateFormData = async (id, data) => {
        try {
            const response = await axios.put(`/update-form-data/${id}`, data);
            console.log('Form data updated:', response.data);
        } catch (error) {
            console.error('Error updating form data:', error);
        }
    };

    return (
        <div>
            <h1>Dynamic JSON Form</h1>
            {jsonFields && (
                <FormGenerator
                    jsonFields={jsonFields}
                    formData={formData}
                    saveFormData={saveFormData}
                    fetchFormData={fetchFormData}
                    updateFormData={updateFormData}
                    setFormId={setFormId}
                    formId={formId}
                />
            )}
        </div>
    );
};

export default App;
```

#### 2. FormGenerator Component

This component generates the form based on JSON fields and handles form submission.

```javascript
import React, { useEffect, useState } from 'react';

const FormGenerator = ({ jsonFields, formData, saveFormData, fetchFormData, updateFormData, setFormId, formId }) => {
    const [formValues, setFormValues] = useState({});

    useEffect(() => {
        if (formData) {
            setFormValues(formData);
        }
    }, [formData]);

    const handleChange = (event) => {
        const { name, value, type, checked } = event.target;
        setFormValues((prevValues) => ({
            ...prevValues,
            [name]: type === 'checkbox' ? checked : value,
        }));
    };

    const handleSubmit = (event) => {
        event.preventDefault();
        if (formId) {
            updateFormData(formId, formValues);
        } else {
            saveFormData(formValues);
        }
    };

    const renderField = (field, key) => {
        const { name, type, value } = field;
        const fieldValue = formValues[key] || value || '';

        switch (type) {
            case 'object':
                return (
                    <fieldset key={key}>
                        <legend>{name}</legend>
                        {Object.keys(field).map((subKey) => renderField(field[subKey], `${key}.${subKey}`))}
                    </fieldset>
                );
            case 'array':
                return (
                    <fieldset key={key}>
                        <legend>{name}</legend>
                        {field.map((item, index) => renderField(item, `${key}[${index}]`))}
                    </fieldset>
                );
            case 'string':
                return (
                    <div key={key}>
                        <label>{name}</label>
                        <input
                            type="text"
                            name={key}
                            value={fieldValue}
                            onChange={handleChange}
                        />
                    </div>
                );
            case 'number':
                return (
                    <div key={key}>
                        <label>{name}</label>
                        <input
                            type="number"
                            name={key}
                            value={fieldValue}
                            onChange={handleChange}
                        />
                    </div>
                );
            case 'boolean':
                return (
                    <div key={key}>
                        <label>{name}</label>
                        <input
                            type="checkbox"
                            name={key}
                            checked={fieldValue}
                            onChange={handleChange}
                        />
                    </div>
                );
            default:
                return null;
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            {Object.keys(jsonFields).map((key) => renderField(jsonFields[key], key))}
            <button type="submit">Submit</button>
        </form>
    );
};

export default FormGenerator;
```

### 3. Backend Server

Ensure your backend server has the following endpoints:

1. **Fetch JSON Fields**:
    ```java
    @GetMapping("/json-fields")
    public List<JsonField> getJsonFields() {
        // Fetch and return the JSON fields from the database
    }
    ```

2. **Save Form Data**:
    ```java
    @PostMapping("/save-form-data")
    public ResponseEntity<?> saveFormData(@RequestBody Map<String, Object> formData) {
        // Save form data to the database
    }
    ```

3. **Fetch Form Data by ID**:
    ```java
    @GetMapping("/form-data/{id}")
    public FormData getFormData(@PathVariable int id) {
        // Fetch and return form data by ID from the database
    }
    ```

4. **Update Form Data**:
    ```java
    @PutMapping("/update-form-data/{id}")
    public ResponseEntity<?> updateFormData(@PathVariable int id, @RequestBody Map<String, Object> formData) {
        // Update form data by ID in the database
    }
    ```

### Explanation

1. **App Component**: Manages fetching JSON fields, form data, and handles saving/updating form data.
2. **FormGenerator Component**: Dynamically generates form inputs based on JSON fields, handles changes and submissions.
3. **Backend Server**: Provides endpoints to fetch JSON fields, save form data, fetch data by ID, and update data.

This setup ensures a dynamic form is generated based on JSON fields, allowing data to be saved and edited seamlessly. Adjust the code as necessary to fit your specific database schema and backend setup.
